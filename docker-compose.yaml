version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: elastic-rule-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8080/api
    networks:
      - elastic-rule-network
    depends_on:
      - backend

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: elastic-rule-backend
    ports:
      - "8080:8080"
      - "9229:9229" # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DEBUG=elastic-rule-platform:*
    env_file:
      - .env
    networks:
      - elastic-rule-network
    depends_on:
      - sync-service

  # GitHub Synchronisation Service
  sync-service:
    build:
      context: ./sync-service
      dockerfile: Dockerfile.dev
    container_name: elastic-rule-sync
    ports:
      - "8081:8081"
    volumes:
      - ./sync-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=github-sync
    env_file:
      - .env
    networks:
      - elastic-rule-network
    restart: unless-stopped

  # Development Database (PostgreSQL) - Optional
  # Uncomment if you decide to use PostgreSQL for metadata
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: elastic-rule-postgres
  #   environment:
  #     POSTGRES_DB: elastic_rules
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - elastic-rule-network

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: elastic-rule-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - elastic-rule-network
    restart: unless-stopped

  # Nginx Reverse Proxy for Development
  nginx:
    image: nginx:alpine
    container_name: elastic-rule-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-enabled:/etc/nginx/conf.d
    networks:
      - elastic-rule-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

networks:
  elastic-rule-network:
    driver: bridge
    name: elastic-rule-network

volumes:
  # postgres_data: # Uncomment if using PostgreSQL
  redis_data:
    driver: local
    name: elastic-rule-redis-data