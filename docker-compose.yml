services:
  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: elastic-rule-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT:-3001}/api
    networks:
      - elastic-rule-network
    depends_on:
      - backend

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: elastic-rule-backend
    ports:
      - "${BACKEND_PORT:-3001}:3001"
      - "9229:9229" # Debug port
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - BACKEND_PORT=${BACKEND_PORT:-3001}
      - ELASTIC_CLOUD_URL=${ELASTIC_CLOUD_URL}
      - ELASTIC_API_KEY=${ELASTIC_API_KEY}
      - DEBUG=elastic-rule-platform:*
    env_file:
      - .env
    networks:
      - elastic-rule-network
    depends_on:
      - redis

  # GitHub Synchronisation Service
  sync-service:
    build:
      context: ./sync-service
      dockerfile: Dockerfile
    container_name: elastic-rule-sync
    ports:
      - "8081:8081"
      - "9230:9230" # Debug port
    volumes:
      - ./sync-service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - ELASTIC_CLOUD_URL=${ELASTIC_CLOUD_URL}
      - ELASTIC_API_KEY=${ELASTIC_API_KEY}
      - GITHUB_OWNER=${GITHUB_OWNER:-elastic}
      - GITHUB_REPO=${GITHUB_REPO:-detection-rules}
      - GITHUB_BRANCH=${GITHUB_BRANCH:-main}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SYNC_INTERVAL_HOURS=${SYNC_INTERVAL_HOURS:-24}
    env_file:
      - .env
    networks:
      - elastic-rule-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: elastic-rule-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - elastic-rule-network
    restart: unless-stopped

  # Nginx Reverse Proxy for Development
  nginx:
    image: nginx:alpine
    container_name: elastic-rule-nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - elastic-rule-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

networks:
  elastic-rule-network:
    driver: bridge
    name: elastic-rule-network

volumes:
  redis_data:
    driver: local
    name: elastic-rule-redis-data